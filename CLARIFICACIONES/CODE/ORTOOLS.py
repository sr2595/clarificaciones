{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f10cbfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: ortools in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (9.14.6206)\n",
      "Requirement already satisfied: absl-py>=2.0.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (2.3.1)\n",
      "Requirement already satisfied: numpy>=1.13.3 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (2.2.3)\n",
      "Requirement already satisfied: pandas>=2.0.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (2.2.3)\n",
      "Requirement already satisfied: protobuf<6.32,>=6.31.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (6.31.1)\n",
      "Requirement already satisfied: typing-extensions>=4.12 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (4.12.2)\n",
      "Requirement already satisfied: immutabledict>=3.0.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from ortools) (4.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas>=2.0.0->ortools) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas>=2.0.0->ortools) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas>=2.0.0->ortools) (2025.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->ortools) (1.17.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.1.1 -> 25.2\n",
      "[notice] To update, run: C:\\Users\\Santi\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install ortools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e1168ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: streamlit in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (1.47.1)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (5.5.0)\n",
      "Requirement already satisfied: blinker<2,>=1.5.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (1.9.0)\n",
      "Requirement already satisfied: cachetools<7,>=4.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (5.5.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (8.1.8)\n",
      "Requirement already satisfied: numpy<3,>=1.23 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (2.2.3)\n",
      "Requirement already satisfied: packaging<26,>=20 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (24.2)\n",
      "Requirement already satisfied: pandas<3,>=1.4.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (2.2.3)\n",
      "Requirement already satisfied: pillow<12,>=7.1.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (11.1.0)\n",
      "Requirement already satisfied: protobuf<7,>=3.20 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (6.31.1)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (19.0.1)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (2.32.3)\n",
      "Requirement already satisfied: tenacity<10,>=8.1.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (9.1.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.4.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (4.12.2)\n",
      "Requirement already satisfied: watchdog<7,>=2.1.5 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (6.0.0)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (3.1.44)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (0.9.1)\n",
      "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from streamlit) (6.4.2)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from altair<6,>=4.0->streamlit) (3.1.5)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from altair<6,>=4.0->streamlit) (4.24.0)\n",
      "Requirement already satisfied: narwhals>=1.14.2 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from altair<6,>=4.0->streamlit) (1.44.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
      "Requirement already satisfied: smmap<6,>=3.0.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from pandas<3,>=1.4.0->streamlit) (2025.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from requests<3,>=2.27->streamlit) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.25.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\santi\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.13_qbz5n2kfra8p0\\localcache\\local-packages\\python313\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.1.1 -> 25.2\n",
      "[notice] To update, run: C:\\Users\\Santi\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install streamlit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd724197",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from ortools.sat.python import cp_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "974e2541",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✅ Facturas seleccionadas:\n",
      "60GEC3700004: 133.727,53 €\n",
      "60FEC3000040: 61.636,53 €\n",
      "60GEC3000040: 61.636,53 €\n",
      "35FEC3700001: 7.905,97 €\n",
      "35GEC3700002: 7.905,97 €\n",
      "60FEC3700005: 6.200,31 €\n",
      "60GEC3700003: 6.200,31 €\n",
      "28GEC3000045: 4.470,62 €\n",
      "60GEC3600004: 2.760,16 €\n",
      "60GEC3500004: 2.063,36 €\n",
      "60EEC3000044: 326,12 €\n",
      "28FEC3000026: 219,03 €\n",
      "60GEC3600003: 154,19 €\n",
      "\n",
      "🔢 TOTAL SELECCIONADO: 295.206,63 €\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import tkinter as tk\n",
    "from tkinter import filedialog, simpledialog, messagebox\n",
    "from ortools.sat.python import cp_model\n",
    "\n",
    "# --- Inicializar ventana principal oculta ---\n",
    "root = tk.Tk()\n",
    "root.withdraw()\n",
    "\n",
    "# --- Selector de archivo ---\n",
    "ruta_archivo = filedialog.askopenfilename(\n",
    "    title=\"Selecciona el archivo Excel\",\n",
    "    filetypes=[(\"Archivos Excel\", \"*.xlsx *.xls\")]\n",
    ")\n",
    "\n",
    "if not ruta_archivo:\n",
    "    messagebox.showerror(\"Error\", \"No seleccionaste ningún archivo.\")\n",
    "    raise SystemExit\n",
    "\n",
    "# --- Leer archivo Excel ---\n",
    "df = pd.read_excel(ruta_archivo, engine=\"openpyxl\")\n",
    "\n",
    "# --- Detectar columnas ---\n",
    "possible_date_cols = ['FECHA', 'Fecha', 'fecha', 'Fecha Emision', 'FECHA_EMISION']\n",
    "col_fecha_emision = next((col for col in possible_date_cols if col in df.columns), None)\n",
    "if not col_fecha_emision:\n",
    "    messagebox.showerror(\"Error\", \"No se encontró columna de fecha de emisión.\")\n",
    "    raise SystemExit\n",
    "\n",
    "possible_factura_cols = ['FACTURA', 'Factura', 'factura', 'Nº Factura', 'NRO_FACTURA']\n",
    "possible_importe_cols = ['IMPORTE', 'Importe', 'importe', 'TOTAL', 'TOTAL_FACTURA']\n",
    "col_factura = next((col for col in possible_factura_cols if col in df.columns), None)\n",
    "col_importe = next((col for col in possible_importe_cols if col in df.columns), None)\n",
    "\n",
    "if not col_factura or not col_importe:\n",
    "    messagebox.showerror(\"Error\", \"No se encontró columna factura o importe.\")\n",
    "    raise SystemExit\n",
    "\n",
    "# --- Procesar columnas ---\n",
    "df[col_fecha_emision] = pd.to_datetime(df[col_fecha_emision], dayfirst=True, errors='coerce')\n",
    "df[col_factura] = df[col_factura].astype(str)\n",
    "\n",
    "# --- Conversión de importes ---\n",
    "def convertir_importe_europeo(valor):\n",
    "    if pd.isna(valor):\n",
    "        return None\n",
    "    if isinstance(valor, (int, float)):\n",
    "        return float(valor)\n",
    "    texto = str(valor).strip().replace('.', '').replace(',', '.')\n",
    "    try:\n",
    "        return float(texto)\n",
    "    except:\n",
    "        return None\n",
    "\n",
    "df['IMPORTE_CORRECTO'] = df[col_importe].apply(convertir_importe_europeo)\n",
    "\n",
    "# --- Resumen ---\n",
    "total = df['IMPORTE_CORRECTO'].sum()\n",
    "minimo = df['IMPORTE_CORRECTO'].min()\n",
    "maximo = df['IMPORTE_CORRECTO'].max()\n",
    "messagebox.showinfo(\"Resumen\", \n",
    "    f\"Número total de facturas: {len(df)}\\n\"\n",
    "    f\"Suma total importes: {total:,.2f} €\\n\"\n",
    "    f\"Importe mínimo: {minimo:,.2f} €\\n\"\n",
    "    f\"Importe máximo: {maximo:,.2f} €\"\n",
    "    .replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\")\n",
    ")\n",
    "\n",
    "# --- Calcular días desde fecha base ---\n",
    "fecha_base = df[col_fecha_emision].min()\n",
    "df['DAYS_FROM_BASE'] = (df[col_fecha_emision] - fecha_base).dt.days.fillna(0).astype(int)\n",
    "df['IMPORTE_CENT'] = (df['IMPORTE_CORRECTO'] * 100).round().astype(int)\n",
    "\n",
    "# --- Pedir importe objetivo ---\n",
    "importe_input = simpledialog.askstring(\"Importe objetivo\", \"Introduce importe (ej: 295.206,63):\")\n",
    "if not importe_input:\n",
    "    messagebox.showerror(\"Error\", \"No se introdujo importe.\")\n",
    "    raise SystemExit\n",
    "\n",
    "importe_objetivo_eur = float(importe_input.replace('.', '').replace(',', '.'))\n",
    "importe_objetivo_cent = int(round(importe_objetivo_eur * 100))\n",
    "\n",
    "# --- Pedir fecha de pago ---\n",
    "fecha_pago_input = simpledialog.askstring(\"Fecha de pago\", \"Introduce fecha (ej: 28/07/2025):\")\n",
    "fecha_pago = pd.to_datetime(fecha_pago_input, dayfirst=True, errors='coerce')\n",
    "if pd.isna(fecha_pago):\n",
    "    messagebox.showerror(\"Error\", \"Fecha de pago no válida.\")\n",
    "    raise SystemExit\n",
    "\n",
    "# --- OR-Tools selección exacta ---\n",
    "def seleccionar_facturas_exactas_ortools(df, objetivo_cent):\n",
    "    model = cp_model.CpModel()\n",
    "    data = list(zip(df[col_factura], df['IMPORTE_CENT'], df['DAYS_FROM_BASE'], df['IMPORTE_CORRECTO']))\n",
    "    vars = [model.NewBoolVar(f\"sel_{f}\") for f, _, _, _ in data]\n",
    "    model.Add(sum(vars[i] * data[i][1] for i in range(len(data))) == objetivo_cent)\n",
    "    model.Minimize(sum(vars))\n",
    "    solver = cp_model.CpSolver()\n",
    "    solver.parameters.max_time_in_seconds = 10\n",
    "    status = solver.Solve(model)\n",
    "    if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:\n",
    "        seleccionadas = []\n",
    "        total_cent = 0\n",
    "        for i, (f, imp_cent, _, imp_eur) in enumerate(data):\n",
    "            if solver.Value(vars[i]) == 1:\n",
    "                seleccionadas.append((f, imp_eur))\n",
    "                total_cent += imp_cent\n",
    "        return seleccionadas, total_cent / 100\n",
    "    else:\n",
    "        return None, None\n",
    "\n",
    "# --- Ejecutar búsqueda ---\n",
    "seleccion, total = seleccionar_facturas_exactas_ortools(df, importe_objetivo_cent)\n",
    "\n",
    "if seleccion:\n",
    "    print(\"\\n✅ Facturas seleccionadas:\")\n",
    "    for f, imp in seleccion:\n",
    "        print(f\"{f}: {imp:,.2f} €\".replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\"))\n",
    "    print(\"\\n🔢 TOTAL SELECCIONADO:\", f\"{total:,.2f} €\".replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\"))\n",
    "else:\n",
    "    print(\"\\n❌ No se encontró una combinación EXACTA de facturas.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "060af741",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 10:31:17.675 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:17.676 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.041 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Santi\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-08-12 10:31:18.042 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.042 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.043 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.044 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.044 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.045 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.046 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-08-12 10:31:18.046 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "from ortools.sat.python import cp_model\n",
    "from io import BytesIO\n",
    "\n",
    "st.set_page_config(page_title=\"Selector de Facturas\", page_icon=\"📄\", layout=\"wide\")\n",
    "\n",
    "st.title(\"📄 Selector de Facturas con OR-Tools\")\n",
    "\n",
    "# --- Subir archivo ---\n",
    "archivo = st.file_uploader(\"Sube el archivo Excel\", type=[\"xlsx\", \"xls\"])\n",
    "if archivo:\n",
    "    df = pd.read_excel(archivo, engine=\"openpyxl\")\n",
    "\n",
    "    # --- Detectar columnas ---\n",
    "    possible_date_cols = ['FECHA', 'Fecha', 'fecha', 'Fecha Emision', 'FECHA_EMISION']\n",
    "    col_fecha_emision = next((col for col in possible_date_cols if col in df.columns), None)\n",
    "    possible_factura_cols = ['FACTURA', 'Factura', 'factura', 'Nº Factura', 'NRO_FACTURA']\n",
    "    possible_importe_cols = ['IMPORTE', 'Importe', 'importe', 'TOTAL', 'TOTAL_FACTURA']\n",
    "    col_factura = next((col for col in possible_factura_cols if col in df.columns), None)\n",
    "    col_importe = next((col for col in possible_importe_cols if col in df.columns), None)\n",
    "\n",
    "    if not (col_fecha_emision and col_factura and col_importe):\n",
    "        st.error(\"❌ No se encontraron todas las columnas necesarias (fecha, factura, importe).\")\n",
    "        st.stop()\n",
    "\n",
    "    # --- Procesar datos ---\n",
    "    df[col_fecha_emision] = pd.to_datetime(df[col_fecha_emision], dayfirst=True, errors='coerce')\n",
    "    df[col_factura] = df[col_factura].astype(str)\n",
    "\n",
    "    def convertir_importe_europeo(valor):\n",
    "        if pd.isna(valor):\n",
    "            return None\n",
    "        if isinstance(valor, (int, float)):\n",
    "            return float(valor)\n",
    "        texto = str(valor).strip().replace('.', '').replace(',', '.')\n",
    "        try:\n",
    "            return float(texto)\n",
    "        except:\n",
    "            return None\n",
    "\n",
    "    df['IMPORTE_CORRECTO'] = df[col_importe].apply(convertir_importe_europeo)\n",
    "\n",
    "    total = df['IMPORTE_CORRECTO'].sum()\n",
    "    minimo = df['IMPORTE_CORRECTO'].min()\n",
    "    maximo = df['IMPORTE_CORRECTO'].max()\n",
    "\n",
    "    st.write(f\"**📊 Resumen del archivo:**\")\n",
    "    st.write(f\"- Número total de facturas: {len(df)}\")\n",
    "    st.write(f\"- Suma total importes: {total:,.2f} €\".replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\"))\n",
    "    st.write(f\"- Importe mínimo: {minimo:,.2f} €\".replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\"))\n",
    "    st.write(f\"- Importe máximo: {maximo:,.2f} €\".replace(\",\", \"X\").replace(\".\", \",\").replace(\"X\", \".\"))\n",
    "\n",
    "    # --- Preparar campos ---\n",
    "    importe_objetivo = st.text_input(\"Introduce importe objetivo (ej: 295.206,63)\")\n",
    "    fecha_pago = st.date_input(\"Fecha de pago\")\n",
    "\n",
    "    if importe_objetivo:\n",
    "        try:\n",
    "            importe_objetivo_eur = float(importe_objetivo.replace('.', '').replace(',', '.'))\n",
    "            importe_objetivo_cent = int(round(importe_objetivo_eur * 100))\n",
    "        except:\n",
    "            st.error(\"Formato de importe no válido.\")\n",
    "            st.stop()\n",
    "\n",
    "        # --- Calcular días y céntimos ---\n",
    "        fecha_base = df[col_fecha_emision].min()\n",
    "        df['DAYS_FROM_BASE'] = (df[col_fecha_emision] - fecha_base).dt.days.fillna(0).astype(int)\n",
    "        df['IMPORTE_CENT'] = (df['IMPORTE_CORRECTO'] * 100).round().astype(int)\n",
    "\n",
    "        # --- OR-Tools ---\n",
    "        def seleccionar_facturas_exactas_ortools(df, objetivo_cent):\n",
    "            model = cp_model.CpModel()\n",
    "            data = list(zip(df[col_factura], df['IMPORTE_CENT'], df['DAYS_FROM_BASE'], df['IMPORTE_CORRECTO']))\n",
    "            vars = [model.NewBoolVar(f\"sel_{f}\") for f, _, _, _ in data]\n",
    "            model.Add(sum(vars[i] * data[i][1] for i in range(len(data))) == objetivo_cent)\n",
    "            model.Minimize(sum(vars))\n",
    "            solver = cp_model.CpSolver()\n",
    "            solver.parameters.max_time_in_seconds = 10\n",
    "            status = solver.Solve(model)\n",
    "            if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:\n",
    "                seleccionadas = []\n",
    "                total_cent = 0\n",
    "                for i, (f, imp_cent, _, imp_eur) in enumerate(data):\n",
    "                    if solver.Value(vars[i]) == 1:\n",
    "                        seleccionadas.append((f, imp_eur))\n",
    "                        total_cent += imp_cent\n",
    "                return seleccionadas, total_cent / 100\n",
    "            else:\n",
    "                return None, None\n",
    "\n",
    "        seleccion, total_sel = seleccionar_facturas_exactas_ortools(df, importe_objetivo_cent)\n",
    "\n",
    "        if seleccion:\n",
    "            st.success(f\"✅ Combinación encontrada para {importe_objetivo_eur:,.2f} €\")\n",
    "            df_sel = pd.DataFrame(seleccion, columns=[\"Factura\", \"Importe (€)\"])\n",
    "            st.dataframe(df_sel)\n",
    "\n",
    "            # Descargar resultados\n",
    "            buffer = BytesIO()\n",
    "            df_sel.to_excel(buffer, index=False, engine=\"openpyxl\")\n",
    "            st.download_button(\n",
    "                label=\"📥 Descargar facturas seleccionadas\",\n",
    "                data=buffer,\n",
    "                file_name=\"facturas_seleccionadas.xlsx\",\n",
    "                mime=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n",
    "            )\n",
    "        else:\n",
    "            st.warning(\"❌ No se encontró una combinación EXACTA de facturas.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
